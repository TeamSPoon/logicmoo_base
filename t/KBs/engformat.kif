;
;  Copyright (C) 2002 Michal Sevcenko
;
;  This program is free software; you can redistribute it and/or
;  modify it under the terms of the GNU Lesser General Public
;  License as published by the Free Software Foundation; either
;  version 2.1 of the License, or (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;  Lesser General Public License for more details.
;
;  You should have received a copy of the GNU Lesser General Public
;  License along with this program; if not, write to the Free Software
;  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
;

; This file contains definitions of auxiliary predicates that help to
; define language representations of predicates defined within SUMO.
; The 'format' binary predicate associates a concept (either relation or
; a function) with a string. When there is a need to visualise certain
; concept in natural language, the associated string is used. The string
; generally contains a natural language description of the concept, but
; it may contain special tags which are interpreted with the browser.
; The description of these tags follows:
;
; &%token - specifies a token that will be made into a hypertext link
;    to concept (relation, function) being visualized
; %1, %2, ... - this tag will be substituted with a natural language
;    representation of the concept's respective argument; if the argument
;    is comound (not atomic, like variable or class), it is enclosed in
;    parentheses, unless the tag is postfixed with an apostrof (like %2')
; %1a{text}, %2a{text}, ... will be replaced with text, if the respective
;    argument is atomic, or with an empty string otherwise
; %1c{text}, %2c{text}, ... will be replaced with text, if the respective
;    argument is compound, or with an empty string otherwise
; %n{text} will be replaced either with an empty string, if a predicate
;    is being rendered as positive, or 'text' otherwise; the %n tag
;    can be used as a shortcut for %n{not}
; %p{text} replaced with 'text' for positive rendering and with an
;    empty string for negative rendering
; %*{range}[delim] will be replaced with a list of natural-language
;    representation of a subset of arguments; range specifies which
;    arguments will be included - it is a comma separated list of
;    numbers or ranges; for example, range '1-4,6' denotes first,
;    second, third, fourth and sixth argument; the delim parameter
;    specifies the delimiter which will be used to separate
;    representations of arguments; both {range} and [delim] may be omited
;    - range defaults to all arguments, and delim defaults to a single
;    space
; %% will be replaced with a single percent character

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; BASE ONTOLOGY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
; Relations

(engFormat part "%1 is %n a &%part of %2")
(engFormat properPart "%1 is %n a &%proper part of %2")
(engFormat piece "%1 is %n a &%piece of %2")
(engFormat component "%1 is %n a &%component of %2")
(engFormat material "%1 is %n &%made of %2")
(engFormat member "%1 is %n a &%member of %2")
(engFormat subCollection "%1 is %n a proper &%sub-collection of %2")
(engFormat containsInformation "%1 %n{doesn't} &%contain%p{s} information %2")
(engFormat property "%1 has %n an &%attribute %2")
(engFormat attribute "%2 is %n an &%attribute of %1")
;manner
(engFormat true "%1 &%is %n %2")
(engFormat lessThan "%1 is %n &%less than %2")
(engFormat greaterThan "%1 is %n &%greater than %2")
(engFormat lessThanOrEqualTo "%1 is %n &%less than or equal to %2")
(engFormat greaterThanOrEqualTo "%1 is %n &%greater than or equal to %2")
(engFormat agent "%2 is %n an &%agent of %1")
(engFormat destination "%1 %n{doesn't} %n &%end%p{s} at %2")
(engFormat experiencer "%2 %n{doesn't} &%experience%p{s} %1")
(engFormat instrument "%2 is %n an &%instrument for %1")
(engFormat origin "%1 %n{doesn't} &%origin%p{s} at %2")
(engFormat patient "%2 is %n a &%patient of %1")
(engFormat resource "%2 is %n a &%resource for %1")
(engFormat result "%2 is %n a &%result of %1")
(engFormat probability "&%probability of %1 is %n %2")
(engFormat conditionalProbability "&%probability of %1 provided that %2 holds is %n %2")
(engFormat increasesLikelihood "%1 %n{doesn't} &%increase%p{s} likelihood of %2")
(engFormat decreasesLikelihood "%1 %n{doesn't} &%decrease%p{s} likelihood of %2")
(engFormat independentProbability "probability of %1 and %2 is %n &%independent")
(engFormat prefers "%1 %n{doesn't} &%prefer%p{s} %2 over %3")
(engFormat inScopeOfInterest "%1 is %n &%interested in %2")
(engFormat notices "%1 %n{doesn't} &%notice%p{s} %2")
(engFormat needs "%1 %n{doesn't} &%need%p{s} %2")
(engFormat wants "%1 %n{doesn't} &%want%p{s} %2")
(engFormat desires "%1 %n{doesn't} &%desire%p{s} %2")
(engFormat considers "%1 %n{doesn't} &%consider%p{s} %2")
(engFormat believes "%1 %n{doesn't} &%believe%p{s} %2")
(engFormat knows "%1 %n{doesn't} &%know%p{s} %2")

(engFormat inList "%1 is %n a &%member of %2")
(engFormat subList "%1 is %n a &%sublist of %2")
(engFormat initialList "%1 %n{doesn't} &%start%p{s} %2")
(engFormat closedOn "%1 is %n &%closed on %2")
(engFormat reflexiveOn "%1 is %n &%reflexive on %2")
(engFormat irreflexiveOn "%1 is %n &%irreflexive on %2")
(engFormat partialOrderingOn "%1 is %n &%partial ordering on %2")
(engFormat totalOrderingOn "%1 is %n &%total ordering on %2")
(engFormat trichotomizingOn "%1 is %n &%trichotomizing on %2")
(engFormat equivalenceRelationOn "%1 is %n &%equivalence relation on %2")
(engFormat distributes "%1 is %n &%distributive over %2")
(engFormat causes "%1 %n{doesn't} &%cause%p{s} %2")
(engFormat copy "%1 is %n an exact &%copy of %2")
(engFormat time "%1 %n{doesn't} exist%p{s} &%during %2")
(engFormat holdsDuring "%2' %2a{%n{doesn't} hold%p{s}} &%during %1")
(engFormat capability "%3 is %n &%capable to do %1 in role %2")
(engFormat exploits "%1 %n{doesn't} &%exploit%p{s} %2")
(engFormat hasPurpose "%1 has %n &%purpose %2")
(engFormat hasPurposeForAgent "%1 has %n &%purpose %2 for %3")
(engFormat hasSkill "%2 has %n &%skill to do %1")
;holdsRight
(engFormat holdsRight "%2 %p{has} %n{doesn't have} the &%right to perform %1")
;confersRight
;holdsObligation
;confersObligation
(engFormat located "%1 is %n &%located at %2")
(engFormat partlyLocated "%1 is %n &%partly located in %2")
(engFormat exactlyLocated "%1 is %n &%exactly located in %2")
(engFormat between "%2 is %n &%between %1 and %3")
;traverses
;crosses
;penetrates
(engFormat possesses "%1 %n{doesn't} &%posess%p{es} %2")
;precondition
;inhibits
;prevents
;refers
;represents
;representsForAgent
;representsInLanguage
;equivalentContentClass
;subsumesContentClass
;equivalentContentInstance
;subsumesContentInstance
;realization
;expressedInLanguage
;subPlan
;uses  

;;;;;;;;;;;;;;;;;;
; Functions

;AbstractionFn
;ExtensionFn
;TruthFn
(engFormat ListFn "(%*[,])")
(engFormat ListOrderFn "%2th &%element of %1")
(engFormat ListLengthFn "&%length of %1")
;ListConcatenateFn
(engFormat WhereFn "the place &%where %1 was at %2'")
(engFormat PropertyFn "&%belongings of %1")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; STRUCTURAL ONTOLOGY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
; Relations

(engFormat instance "%1 is %n an &%instance of %2")
(engFormat inverse "%1 is %n &%inverse to %2")
(engFormat subclass "%1 is %n a &%subclass of %2")
(engFormat subrelation "%1 is %n a &%subrelation of %2")
(engFormat domain "%2th argument of %1 is %n an &%instance of %3")
(engFormat domainSubclass "%2th argument of %1 is %n a &%subclass of %3")
(engFormat equal "%1 is %n &%equal to %2")
(engFormat range "&%range of %1 is %n an instance of %2")
(engFormat valence "%1 %p{%&has} %n{doesn't %&have} %2 &%argument(s)")
(engFormat disjoint "%1 is %n &%disjoint from %2")
(engFormat disjointRelation "%1 and %2 are %n &%disjoint")
(engFormat contraryProperty "%1 is %n &%opposed to %2")
(engFormat exhaustiveDecomposition "%1 is %n &%covered by %*{2-}[,]")
(engFormat disjointDecomposition "%1 is %n &%disjointly decomposed into %*{2-}[,]")
(engFormat partition "%1 is %n &%exhaustively partitioned into %*{2-}[,]")
(engFormat relatedInternalConcept "%1 is %n &%internally related to %2")
;relatedExternalConcept
;synonymousExternalConcept
;subsumingExternalConcept
;subsumedExternalConcept
(engFormat name "%1 has %n &%name %2")
(engFormat subAttribute "%1 is %n a &%subattribute of %2")
(engFormat successorAttribute "%1 is %n an immediate &%successor attribute of %2")
(engFormat successorAttributeClosure "%1 is %n a &%successor attribute of %2")
(engFormat entails "%1 %n{doesn't} &%entail%p{s} %2")
(engFormat holds "%1(%*{2-}[,]) %n{doesn't} &%hold%p{s}")

;;;;;;;;;;;;;;;;;;
; Functions

(engFormat DomainFn "&%domain of %1")
(engFormat RangeFn "&%range of %1")
(engFormat AssignmentFn "%1(%*{2-}[,])")
(engFormat PowerSetFn "all &%subclasses of %1")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MEREOTOPOLOGY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
; Relations

(engFormat connected "%1 is %n &%conneced to %2")
(engFormat connects "%1 &%connects %2 and %3")
(engFormat meetsSpatially "%1 %n{doesn't} &%meet%p{s} %2")
(engFormat overlapsSpatially "%1 %n{doesn't} &%overlap%p{s} with %2")
(engFormat overlapsPartially "%1 %n{doesn't} partially &%overlap%p{s} with %2")
(engFormat superficialPart "%1 is %n a &%superficial part of %2")
(engFormat surface "%1 is %n a &%surface of %2")
(engFormat interiorPart "%1 is %n a &%interior part of %2")
(engFormat hole "%1 is %n a &%hole in %2")
(engFormat fills "%1 %n{doesn't} &%fill%p{s} %2")
(engFormat completelyFills "%1 %n{doesn't} &%completely fill%p{s} %2")
(engFormat partiallyFills "%1 %n{doesn't} &%partially fill%p{s} %2")
(engFormat properlyFills "%1 %n{doesn't} &%properly fill%p{s} %2")

;;;;;;;;;;;;;;;;;;
; Functions

;MereologicalSumFn
;MereologicalProductFn
;MereologicalDifferenceFn
;PrincipalHostFn
;SkinFn  

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TEMPORAL CONCEPTS 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
; Relations

(engFormat duration "&%duration of %1 is %n %2")
;frequency
(engFormat temporalPart "%1 is %n a &%part of %2'")
(engFormat starts "%1 %n{doesn't} &%start%p{s} %2")
(engFormat finishes "%1 %n{doesn't} &%finish%p{es} %2")
(engFormat before "%1 %n{doesn't} happen%p{s} &%before %2'")
(engFormat beforeOrEqual "%1 %n{doesn't} &%happen%{s} before or at %2")
(engFormat temporallyBetween "%2 is %n &%between %1 and %3")
(engFormat temporallyBetweenOrEqual "%2 is %n &%between or at %1 and %3")

(engFormat overlapsTemporally "%2 %n{doesn't} &%overlap%p{s} %1")
(engFormat during "%1 %n{doesn't} take%p{s} place &%during %2")
(engFormat meetsTemporally "%1 %n{doesn't} &%meet%p{s} %2")
(engFormat earlier "%1 %n{doesn't} happen%p{s} &%earlier than %2")
(engFormat cooccur "%1 %n{doesn't} &%occur%p{s} at the same time as %2")
(engFormat date "&%date of %1 is %n %2")

;;;;;;;;;;;;;;;;;;
; Functions

(engFormat TemporalCompositionFn "&%decomposition of %1 into %3 %2s")
(engFormat BeginFn "the &%beginning of %1'")
(engFormat EndFn "the &%end of %1'")
(engFormat TimeIntervalFn "&%interval between %1 and %2")
(engFormat WhenFn "the &%time when %1 exists")
(engFormat PastFn "&%before %1'")
(engFormat ImmediatePastFn "immediately &%before %1'")
(engFormat FutureFn "&%after %1'")
(engFormat ImmediateFutureFn "immediately &%after %1'")
(engFormat YearFn "%1 of %2")
(engFormat MonthFn "%1 of %2")
(engFormat DayFn "%1 of %2")
(engFormat HourFn "%1 of %2")
(engFormat MinuteFn "%1 of %2")
(engFormat SecondFn "%1 of %2")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SET/CLASS THEORY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
; Relations

(engFormat subset "%1 is %n a &%subset of %2")
(engFormat element "%1 is %n an &%element of %2")

;;;;;;;;;;;;;;;;;;
; Functions

;UnionFn
;IntersectionFn
;RelativeComplementFn
;ComplementFn
;GeneralizedUnionFn
;GeneralizedIntersectionFn
;CardinalityFn
;KappaFn  


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; OBJECTS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
; Relations

;developmentalForm
(engFormat inhabits "%1 %n{doesn't} &%live%p{s} in %2")
(engFormat parent "%2 is %n a &%parent of %1")
(engFormat mother "%2 is %n a &%mother of %1")
(engFormat father "%2 is %n a &%father of %1")
(engFormat sibling "%1 is %n a &%sibling of %2")
;authors
;editor
;publishes
(engFormat version "%1 is %n a &%version of %2")
;engineeringSubcomponent
;connectedEngineeringComponents
;connectsEngineeringComponents
;familyRelation
(engFormat employs "%1 %n{doesn't} &%employ%p{s} %2")
;subOrganizations
;occupiesPosition
;citizen  

;;;;;;;;;;;;;;;;;;
; Functions

;EditionFn
;SeriesVolumeFn
;PeriodicalIssueFn
;OrganizationFn  


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; PROCESSES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
; Relations

(engFormat subProcess "%1 is %n a &%subprocess of %2")
(engFormat path "%2 is %n &%path along with %1 occurs")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; QUALITIES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
; Relations

(engFormat orientation "%1 is %n %3 to %2")
;direction
(engFormat birthTime "%1 is %n born at %2")
(engFormat deathTime "%1 %n{doesn't} die%p{s} at %2")
;modalProperty

;;;;;;;;;;;;;;;;;;
; Functions

;RelativeTimeFn


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; UNITS OF MEASURE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
; Relations

(engFormat measure "the &%measure of %1 is %n %2")
;age
(engFormat length "the &%length of %1 is %n %2")
;width
;diameter
;height
;distance
(engFormat larger "%1 is %n &%larger than %2")
;smaller
(engFormat monetaryValue "&%value of %1 is %n %2")

;;;;;;;;;;;;;;;;;;
; Functions

(engFormat MeasureFn "%1 %2(s)")
;KiloFn
;MegaFn
;GigaFn
;TeraFn
;MilliFn
;MicroFn
;NanoFn
;PicoFn
;IntervalFn
;RecurrentTimeIntervalFn
;MagnitudeFn
;DensityFn
;SpeedFn
;VelocityFn
(engFormat WealthFn "&%value of belongings of %1")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; NUMERIC FUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
; Relations

(engFormat identityElement "%2 is %n an &%identity element of %1")

;;;;;;;;;;;;;;;;;;
; Functions

(engFormat MultiplicationFn "%*[*]")
(engFormat AdditionFn "(%*[+])")
(engFormat SubtractionFn "(%*[-])")
(engFormat DivisionFn "%*[/]")
;AbsoluteValueFn
;ArcCosineFn
;ArcSineFn
;ArcTangentFn
;CeilingFn
;CosineFn
;DenominatorFn
;ExponentiationFn
;FloorFn
;GreatestCommonDivisorFn
;ImaginaryPartFn
;IntegerSquareRootFn
;LeastCommonMultipleFn
;LogFn
;MaxFn
;MinFn
;NumeratorFn
;RationalNumberFn
;RealNumberFn
;ReciprocalFn
(engFormat RemainderFn "%1 &%mod %2")
;RoundFn
;SignumFn
;SineFn
;SquareRootFn
;TangentFn
;IdentityFn
(engFormat SuccessorFn "(%1+1)")
(engFormat PredecessorFn "(%1+2)")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; GRAPH THEORY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
; Relations

(engFormat links "%3 %n{doesn't} &%link%p{s} %1 and %2")
(engFormat graphPart "%1 is %n a &%part of %2")
(engFormat subGraph "%1 is %n a &%subgraph of %2") 
(engFormat pathLength "the &%length of %1 is %n %2")
;arcWeight  

;;;;;;;;;;;;;;;;;;
; Functions

;InitialNodeFn
;TerminalNodeFn
(engFormat BeginNodeFn "the &%beginning of %1")
(engFormat EndNodeFn "the &%end of %1")
;PathWeightFn
;MinimalWeightedPathFn
;MaximalWeightedPathFn
;GraphPathFn
;CutSetFn
;MinimalCutSetFn  
