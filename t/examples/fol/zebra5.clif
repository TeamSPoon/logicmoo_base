;;#!swipl  -g "ensure_loaded(pack(logicmoo_base/t/examples/csp/'einstein pfc'))"
;;:- module(zebra5,[]).
;;/** Module zebra5 - Test Zerbra Puzzle in CLIF for SWI-Prolog
;; Maintainer: Douglas Miles */
;;:- ensure_loaded(library(logicmoo_user)).
;;% rest of the file is read as CLIF
;;:- load_clif.        


(domain livesIn 1 Person) 
(domain livesIn 2 tHouse) 

(domain natOrigin 1 Person) 
(domain natOrigin 2 tCountry) 

(domain colorOf 1 tPhysical) 
(domain colorOf 2 vtColor) 

(domain address 1 tHouse) 
(domain address 2 tAddress) 
(argQuotedIsa address 2 Integer) 

(domain caresFor 1 Person) 
(domain caresFor 2 tAnimal) 

(domain consumedAt 1 tBeverage) 
(domain consumedAt 2 tHouse) 

(domain consumes 1 Person) 
(domain consumes 2 tBeverage) 

(domain brand 1 tCigarette) 
(domain brand 2 tBrandName)
(argQuotedIsa brand 2 String)

(domain caresForType 1 Person) 
(domainSubclass caresForType 2 tAnimal) 

(iff (caresForType ?m1 ?t1) (caresFor ?m1 ?p1) (instance ?p1 ?t1))

(vtColor vYellow) 
(vtColor vBlue) 
(vtColor vGreen) 
(vtColor vRed) 
(vtColor vIvory)

; ============================================================
; There are five houses 
; ============================================================
(thereExistsExactly 5 ?h (instance ?h tHouse)) 

; All house have a different address
(forall (?h1 ?h2) (if (and (instance ?h1 tHouse) (instance ?h2 tHouse) (different ?h1 ?h2)
 (address ?h1 ?a1) (address ?h2 ?a2))  (different ?a1 ?a2)))

(address house1 1) 
(address house2 2) 
(address house3 3) 
(address house4 4)                                                          
(address house5 5) 

; ============================================================
; The Englishman lives in the red house 
; ============================================================
(exists (?m ?h) (iff (and (livesIn ?m ?h) (natOrigin ?m iEngland)) (colorOf ?h vRed)))

; ============================================================
; The Spaniard owns the dog 
; ============================================================
;; NOTE this file uses purposely overuses instance/2 for performance testing
(exists (?m ?pet) (iff (and (instance ?m Person) (natOrigin ?m iSpain))  (and (caresFor ?m ?pet) (instance ?pet tDog))))

; ============================================================
; Coffee is drunk in the green house 
; ============================================================
(forall (?b) (and (instance ?b tCoffee) (consumedAt ?b ?h) (colorOf ?h vGreen)))

; ============================================================
; The Ukrainian drinks tea 
; ============================================================
(exists (?m) (if (instance ?m Person) (natOrigin ?m iUkrain)) (and (consumes ?m ?b) (instance ?b tTea)))


; ============================================================
; The green house is immediately to the right of the ivory house (right means your right)
; ============================================================
(exists (?h1 ?h2) (and (instance ?h1 tHouse) (instance ?h2 tHouse) (colorOf ?h1 tGreen) (colorOf ?h2 vIvory) (rightOfSpatial ?h1 ?h2)))

(if (rightOfSpatial ?h1 ?h2) (and (address ?h1 ?a1) (address ?h2 ?a2) (equals ?a2 (AdditionFn ?a1 1))))

(if (rightOfSpatial ?h1 ?h2) (nextTo ?h1 ?h2))
(if (nextTo ?h1 ?h2) (nextTo ?h2 ?h1))

; ============================================================
; The Old Gold smoker owns snails 
; ============================================================

(exists (Person ?m1) (and (smokes brand ?m1 "Old Gold") (caresForType ?m1 tSnail)))

(iff (smokes brand ?m1 ?t1) (and (smokes ?m1 ?c1) (brand ?c1 ?t1)))
(iff (caresForType ?m1 ?t1) (and (caresFor ?m1 ?p1) (instance ?p1 ?t1)))

; ============================================================
; Kools are smoked in the yellow house 
; ============================================================

(forall (?b1) (brand ?b1 "Kools") (livesIn ?m1 ?h1) (smokes ?m1 ?b1) (colorOf ?h1 vYellow)) 

; ============================================================
; Milk is drunk in the middle house 
; ============================================================

(forall (?b1) (instance ?b1 tMilk) (livesIn ?m1 ?h1) (consumes ?m1 ?b1) (address ?h1 3)) 

; ============================================================
; The Norwegian lives in the first house 
; ============================================================

(exists (?m1) (and (instance ?m1 Person) (natOrigin ?m1 iNorway) (livesIn ?m1 ?h1) (address ?h1 1)))


; ============================================================
; The man who smokes Chesterfields lives in the house next to the man with the fox 
; ============================================================

(exists (?m1) (and (instance ?m1 Person)  
 (livesIn ?h1 ?m1) (smokes ?m1 ?c1) (brand ?c1 "Chesterfields") 
 (nextTo ?h1 ?h2) (livesIn ?m2  ?h2) (caresFor ?m1 ?p2) (instance ?p2  tFox)))


; ============================================================
; Kools are smoked in the house next to the house where the horse is kept 
; ============================================================

(exists (?h1) (and (instance ?h1 tHouse)  
 (livesIn ?h1 ?m1) (smokes ?m1 ?c1) (brand ?c1 "Kools") (caresFor ?m1 ?p1) (instance ?p1  tHorse)))

; ============================================================
; The Lucky Strike smoker drinks orange juice 
; ============================================================

(exists (?m1) (and (instance ?m1 Person) (smokes ?m1 ?c1) (brand ?c1 "LuckyStrikes") 
  (consumes ?m1 ?b1) (instance ?b1 tOrangeJuice)))

; ============================================================
; The Japanese smokes Parliaments 
; ============================================================

(exists (?h1) (and (instance ?h1 tHouse) (instance ?h2 tHouse) 
  (livesIn ?h1 ?m1) (natOrigin ?m1 iJapan) (smokes ?h2 ?c1) (brand ?c1 "Parliaments")))


; ============================================================
; The Norwegian lives next to the blue house 
; ============================================================

(exists (?h1) 
 (if (and (instance ?h1 tHouse) (instance ?h2 tHouse) (livesIn ?h1 ?m1) 
  (natOrigin ?m1 iNorway) (nextTo ?h1 ?h2)) (colorOf ?h2 vBlue)))


; ============================================================
; In the interest of clarity   it must be added that 
; each of the five houses is painted a different color  
; ============================================================

(forall (?h1 ?h2) 
   (if (and (instance ?h1 tHouse) (instance ?h2 tHouse) (colorOf ?h1 ?c1) (different ?h1 ?h2))
             (and (colorOf ?h2 ?c2) (different ?c1 ?c2))))

; ============================================================
; and their inhabitants are of different national extractions 
; ============================================================

(forall (?h1 ?h2) 
   (if (and (instance ?h1 tHouse) (instance ?h2 tHouse) (livesIn ?h1 ?m1) (livesIn ?h2 ?m2) (different ?h1 ?h2)
    (and (natOrigin ?m1 ?o1) (natOrigin ?m2 ?o2) (different ?o1 ?o2)))))

; ============================================================
; own different pets  
; ============================================================

(forall (?m1 ?m2) 
  (if (and (instance ?m1 Person) (instance ?m2 Person) (different ?m1 ?m2))
   (and  (caresFor ?m1 ?p1) (caresFor ?m2 ?p2) (instance ?p1 ?o1) (instance ?p2 ?o2) (different ?o1 ?o2))))

; ============================================================
; drink different beverages 
; ============================================================

(forall (?m1 ?m2) 
  (if (and (instance ?m1 Person) (instance ?m2 Person) (different ?m1 ?m2))
   (and (consumes ?m1 ?p1) (consumes ?m2 ?p2) (instance ?p1 ?o1) (instance ?p2 ?o2) (different ?o1 ?o2))))

; ============================================================
; and smoke different brands of American cigarets 
; ============================================================

(forall (?m1 ?m2) 
  (if (and (instance ?m1 Person) (instance ?m2 Person) (different ?m1 ?m2))
   (and (smokes ?m1 ?p1) (smokes ?m2 ?p2) (brand ?p1 ?o1) (brand ?p2 ?o2) (different ?o1 ?o2))))



; (ask (and (caresFor ?Who ?Animal) (isa ?Animal tZerbra)))
